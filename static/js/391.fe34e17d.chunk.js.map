{"version":3,"file":"static/js/391.fe34e17d.chunk.js","mappings":"8SAEaA,EAAOC,EAAAA,GAAAA,GAAH,yGAOJC,EAAOD,EAAAA,GAAAA,GAAH,gbAiBJE,EAAQF,EAAAA,GAAAA,IAAH,6DAKLG,EAAUH,EAAAA,GAAAA,IAAH,4jBAYPI,EAAWJ,EAAAA,GAAAA,GAAH,mKAQRK,EAAOL,EAAAA,GAAAA,EAAH,mK,mBCSjB,EAnDa,WACT,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,MAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAQ,mCAAG,WAAOC,EAAYR,GAAnB,gFACPS,GAAUC,EAAAA,EAAAA,KADH,SAGTN,GAAa,GAHJ,UAIcO,EAAAA,EAAAA,GAAY,YAAD,OAAaX,EAAb,YAAgCQ,GAJzD,OAIHI,EAJG,OAKTN,EAAYM,GALH,gDAOS,iBAAf,KAAMC,MACLC,EAAAA,OAAAA,QAAe,sDAAuDL,GARjE,yBAWTL,GAAa,GAXJ,oFAAH,wDAsBd,OAPAW,EAAAA,EAAAA,YAAU,WAEN,IAAMP,EAAa,IAAIQ,gBAEvB,OADAT,EAASC,EAAYR,GACd,kBAAMQ,EAAWS,OAAjB,CACV,GAAE,CAACjB,KAGA,gCACCG,IAAa,SAACe,EAAA,EAAD,CAAQC,MAAM,uBAC3Bd,IACG,SAACZ,EAAD,UACKY,EAASe,KAAKC,KAAI,SAAAC,GAAI,OACnB,UAAC3B,EAAD,WACK2B,EAAKC,cACH,SAAC3B,EAAD,CAAO4B,IAAG,8CAAyCF,EAAKC,cAAgBE,IAAKH,EAAKI,QACnF,SAAC9B,EAAD,CAAO4B,I,izXAAmBC,IAAKH,EAAKI,QAE1C,UAAC7B,EAAD,YACI,SAACC,EAAD,UAAWwB,EAAKI,OACfJ,EAAKK,YACH,UAAC5B,EAAD,yBAAkBuB,EAAKK,kBARnBL,EAAKM,GADG,QAiBtC,C,sDCzDM,IAAMlB,EAAuB,WAChC,MAAO,CACHmB,QAAS,IACTC,MAAO,QACPC,QAAS,OACTC,gBAAiB,qBACjBC,SAAU,YACVC,SAAU,OACVC,UAAW,qBACXC,SAAU,OAEjB,C,2ECVDC,IAAAA,SAAAA,QAAyB,6BACzB,IAGM1B,EAAW,mCAAG,WAAO2B,EAAa9B,EAAY+B,GAAhC,uFAEMF,IAAAA,IAAUC,EAAa,CACzCE,OAAQ,CACJC,QAPI,mCAQJF,MAAAA,GAEJG,OAAQlC,EAAWkC,SAPP,cAEVC,EAFU,yBASTA,EAAQC,MATC,2CAAH,0DAcjB,K","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","constants/notifyOptions.js","utilites/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n    display: flex;\n    gap: 20px;\n    flex-wrap: wrap;\n`;\n\nexport const Item = styled.li`\n    width: 200px;\n    height: 280px;\n    background-color: rgba(0, 0, 0, 0.6);\n    border-radius: 5px;\n    box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\n    transition: transform 0.3s ease;\n    overflow: hidden;\n    position: relative;\n\n    :hover, :focus {\n        tansform: scale(1.5);\n        box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n        transform: scale(1.05);\n    }\n`;\n\nexport const Image = styled.img`\n    width: 100%;\n    height: 100%;\n`;\n\nexport const Details = styled.div`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    padding: 8px;\n    width: 100%;\n    height: 25%;\n    overflow: auto;\n    background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.9));\n    box-shadow: rgba(0, 0, 0, 0.17) 0px -23px 25px 0px inset, rgba(0, 0, 0, 0.15) 0px -36px 30px 0px inset, rgba(0, 0, 0, 0.1) 0px -79px 40px 0px inset, rgba(0, 0, 0, 0.06) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px;\n    `;\n\nexport const SubTitle = styled.h2`\n    margin-block-start: 0;\n    margin-block-end: 0;\n    margin-bottom: 12px;\n    font-size: 20px;\n    color: rgb(255, 245, 238, 0.8);\n`;\n\nexport const Text = styled.p`\n    margin-block-start: 0;\n    margin-block-end: 0;\n    margin-bottom: 12px;\n    font-size: 18px;\n    color: rgb(255, 245, 238, 0.8);\n`;","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { notifyOptionsFailure } from \"constants/notifyOptions\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport fetchMovies from \"utilites/api\";\nimport { Details, Image, Item, List, SubTitle, Text } from \"./Cast.styled\";\nimport defaultImage from '../../images/empty-photo.png';\nimport Loader from \"components/Loader/Loader\";\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [isLoading, setIsLoading] = useState(false)\n    const [infoCast, setInfoCast] = useState(null);\n\n    const openCast = async (controller, movieId) => {\n        const options = notifyOptionsFailure();\n        try {\n            setIsLoading(true);\n            const response = await fetchMovies(`/3/movie/${movieId}/credits`, controller);\n            setInfoCast(response);\n        } catch (error) {\n            if(error.code !== 'ERR_CANCELED') {\n                Notify.failure('OOps! Error loading information. Please, try again!', options);\n            };\n        } finally {\n            setIsLoading(false);\n        };\n    };\n\n    useEffect(() => {\n\n        const controller = new AbortController();\n        openCast(controller, movieId);\n        return () => controller.abort();\n    }, [movieId]);\n\n    return (\n        <>\n        {isLoading && <Loader color=\"rgb(204, 0, 0, .7)\" />}\n        {infoCast && (\n            <List>\n                {infoCast.cast.map(item => (\n                    <Item key={item.id}>\n                        {item.profile_path\n                        ? (<Image src={`https://image.tmdb.org/t/p/original/${item.profile_path}`} alt={item.name} />)\n                        : <Image src={defaultImage} alt={item.name} />\n                    }\n                    <Details>\n                        <SubTitle>{item.name}</SubTitle>\n                        {item.character \n                        && <Text>Character: {item.character}</Text>}\n                    </Details>\n                    </Item>\n                )) }\n            </List>\n        )}\n        </>\n    );\n};\n\nexport default Cast;","\nexport const notifyOptionsFailure = () => {\n    return {\n        timeout: 4000,\n        width: '400px',\n        svgSize: '80px',\n        backgroundColor: 'rgb(204, 0, 0, .7)',\n        position: 'right-top',\n        distance: '60px',\n        textColor: 'rgb(255, 245, 238)',\n        fontSize: '20px',\n      };\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '84bdbe2f4baecea0c1be28902afc6a5b';\n\n\nconst fetchMovies = async (typeRequest, controller, query) => {\n\n    const request = await axios.get(typeRequest, {\n        params: {\n            api_key: API_KEY,\n            query,\n        },\n        signal: controller.signal,\n    });\n    return request.data;\n};\n\n\n\nexport default fetchMovies;"],"names":["List","styled","Item","Image","Details","SubTitle","Text","movieId","useParams","useState","isLoading","setIsLoading","infoCast","setInfoCast","openCast","controller","options","notifyOptionsFailure","fetchMovies","response","code","Notify","useEffect","AbortController","abort","Loader","color","cast","map","item","profile_path","src","alt","name","character","id","timeout","width","svgSize","backgroundColor","position","distance","textColor","fontSize","axios","typeRequest","query","params","api_key","signal","request","data"],"sourceRoot":""}