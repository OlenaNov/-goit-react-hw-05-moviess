{"version":3,"file":"static/js/202.918b5aac.chunk.js","mappings":"mSAkDA,EA5CgB,WACZ,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,MAA/C,eAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAU,mCAAG,WAAOC,EAAYR,GAAnB,uFAEXI,GAAa,GAFF,UAGYK,EAAAA,EAAAA,GAAW,YAAD,OAAaT,EAAb,YAAgCQ,GAHtD,OAGLE,EAHK,OAIXJ,EAAeI,EAASC,SAJb,gDAMO,iBAAf,KAAMC,MACLC,EAAAA,OAAAA,QAAe,uDAPR,yBAUXT,GAAa,GAVF,oFAAH,wDAoBhB,OANAU,EAAAA,EAAAA,YAAU,WACN,IAAMN,EAAa,IAAIO,gBAEvB,OADAR,EAAWC,EAAYR,GAChB,kBAAMQ,EAAWQ,OAAjB,CACV,GAAE,CAAChB,KAGA,gCACCG,IAAa,SAAC,IAAD,CAAYc,MAAM,YAC/BZ,GACE,wBACMA,EAAYa,KAAI,SAAAC,GAAI,OACjB,2BACI,wBAAKA,EAAKC,UACV,uBAAID,EAAKE,YAFJF,EAAKG,GADG,OAOtB,0BACC,0EAIf,C,2EC9CDC,IAAAA,SAAAA,QAAyB,6BACzB,IAGMd,EAAU,mCAAG,WAAOe,EAAahB,EAAYiB,GAAhC,uFAEOF,IAAAA,IAAUC,EAAa,CACzCE,OAAQ,CACJC,QAPI,mCAQJF,MAAAA,GAEJG,OAAQpB,EAAWoB,SAPR,cAETC,EAFS,yBASRA,EAAQC,MATA,2CAAH,0DAchB,K","sources":["components/Reviews/Rewiews.jsx","utilites/api.js"],"sourcesContent":["import SyncLoader from \"react-spinners/SyncLoader\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport fetchFilms from \"utilites/api\";\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [isLoading, setIsLoading] = useState(false);\n    const [infoReviews, setInfoReviews] = useState(null);\n\n    const seeRewiews = async (controller, movieId) => {\n        try {\n            setIsLoading(true);\n            const response = await fetchFilms(`/3/movie/${movieId}/reviews`, controller);\n            setInfoReviews(response.results);\n        } catch (error) {\n            if(error.code !== 'ERR_CANCELED') {\n                Notify.failure('OOps! Error loading information. Please, try again!');\n            };\n        } finally {\n            setIsLoading(false);\n        };\n    };\n\n    useEffect(() => {\n        const controller = new AbortController();\n        seeRewiews(controller, movieId);\n        return () => controller.abort();\n    }, [movieId]);\n\n    return (\n        <>\n        {isLoading && <SyncLoader color=\"#eb1736\" />}\n        {infoReviews \n        ? (<ul>\n                {infoReviews.map(item => (\n                    <li key={item.id}>\n                        <h3>{item.author}</h3>\n                        <p>{item.content}</p>\n                    </li>\n                )) }\n            </ul>)\n            : (<div>\n                <p>'We don`t have any reviews for this movie'</p>\n                </div>)}\n        </>\n    );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '84bdbe2f4baecea0c1be28902afc6a5b';\n\n\nconst fetchFilms = async (typeRequest, controller, query) => {\n\n    const request = await axios.get(typeRequest, {\n        params: {\n            api_key: API_KEY,\n            query,\n        },\n        signal: controller.signal,\n    });\n    return request.data;\n};\n\n\n\nexport default fetchFilms;"],"names":["movieId","useParams","useState","isLoading","setIsLoading","infoReviews","setInfoReviews","seeRewiews","controller","fetchFilms","response","results","code","Notify","useEffect","AbortController","abort","color","map","item","author","content","id","axios","typeRequest","query","params","api_key","signal","request","data"],"sourceRoot":""}