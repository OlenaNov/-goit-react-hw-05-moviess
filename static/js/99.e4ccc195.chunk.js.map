{"version":3,"file":"static/js/99.e4ccc195.chunk.js","mappings":"oTAEaA,EAAOC,EAAAA,GAAAA,GAAH,yGAOJC,EAAOD,EAAAA,GAAAA,GAAH,snBAwBJE,EAAWF,EAAAA,GAAAA,GAAH,qPAYRG,EAAOH,EAAAA,GAAAA,EAAH,qP,mBCUjB,EA/CgB,WACZ,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAW,mCAAG,WAAOC,EAAYR,GAAnB,gFACVS,GAAUC,EAAAA,EAAAA,KADA,SAGZN,GAAa,GAHD,UAIWO,EAAAA,EAAAA,GAAY,YAAD,OAAaX,EAAb,YAAgCQ,GAJtD,OAINI,EAJM,OAKZN,GAAe,OAAIM,EAASC,UALhB,gDAOM,iBAAf,KAAMC,MACLC,EAAAA,OAAAA,QAAe,sDAAuDN,GAR9D,yBAWZL,GAAa,GAXD,oFAAH,wDAqBjB,OANAY,EAAAA,EAAAA,YAAU,WACN,IAAMR,EAAa,IAAIS,gBAEvB,OADAV,EAAYC,EAAYR,GACjB,kBAAMQ,EAAWU,OAAjB,CACV,GAAE,CAAClB,KAGA,gCACCG,IAAa,SAACgB,EAAA,EAAD,IACbd,EAAYe,SAAWjB,GACrB,0BACC,SAACR,EAAD,UACKU,EAAYgB,KAAI,SAAAC,GAAI,OACjB,UAACzB,EAAD,YACI,SAACC,EAAD,UAAWwB,EAAKC,UAChB,SAACxB,EAAD,UAAOuB,EAAKE,YAFLF,EAAKG,GADC,SAQtB,0BACC,SAAC3B,EAAD,2DAIf,C,sDCpDM,IAAMY,EAAuB,WAChC,MAAO,CACHgB,QAAS,IACTC,MAAO,QACPC,QAAS,OACTC,gBAAiB,qBACjBC,SAAU,YACVC,SAAU,OACVC,UAAW,0BACXC,SAAU,OAEjB,C,2ECVDC,IAAAA,SAAAA,QAAyB,6BACzB,IAGMvB,EAAW,mCAAG,WAAOwB,EAAa3B,EAAY4B,GAAhC,uFAEMF,IAAAA,IAAUC,EAAa,CACzCE,OAAQ,CACJC,QAPI,mCAQJF,MAAAA,GAEJG,OAAQ/B,EAAW+B,SAPP,cAEVC,EAFU,yBASTA,EAAQC,MATC,2CAAH,0DAcjB,K","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Rewiews.jsx","constants/notifyOptions.js","utilites/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n    display: flex;\n    gap: 12px;\n    flex-wrap: wrap;\n`;\n\nexport const Item = styled.li`\n    width: 50%;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 40px;\n    border-radius: 8px;\n    background-image: linear-gradient(to bottom, rgba(0, 0, 0, .7), rgba(0, 0, 0, .9));\n    border-radius: 5px;\n    box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\n    transition: transform 0.3s ease;\n    overflow: hidden;\n    position: relative;\n\n    :hover, :focus {\n        tansform: scale(1.5);\n        box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n        transform: scale(1.05);\n    }\n\n    @media screen and (max-width: 1024px) {\n        padding: 18px;\n      }\n`;\n\nexport const SubTitle = styled.h2`\n    margin-block-start: 0;\n    margin-block-end: 0;\n    margin-bottom: 12px;\n    font-size: 24px;\n    color: rgb(255, 245, 238, 0.8);\n\n    @media screen and (max-width: 1024px) {\n        font-size: 20px;\n      }\n`;\n\nexport const Text = styled.p`\n    margin-block-start: 0;\n    margin-block-end: 0;\n    margin-bottom: 12px;\n    font-size: 20px;\n    color: rgb(255, 245, 238, 0.8);\n\n    @media screen and (max-width: 1024px) {\n        font-size: 16px;\n      }\n`;","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { notifyOptionsFailure } from \"constants/notifyOptions\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport fetchMovies from \"utilites/api\";\nimport { Item, List, SubTitle, Text } from \"./Reviews.styled\";\nimport Loader from \"components/Loader\";\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [isLoading, setIsLoading] = useState(false);\n    const [infoReviews, setInfoReviews] = useState([]);\n\n    const openReviews = async (controller, movieId) => {\n        const options = notifyOptionsFailure();\n        try {\n            setIsLoading(true);\n            const response = await fetchMovies(`/3/movie/${movieId}/reviews`, controller);\n            setInfoReviews([...response.results]);\n        } catch (error) {\n            if(error.code !== 'ERR_CANCELED') {\n                Notify.failure('OOps! Error loading information. Please, try again!', options);\n            };\n        } finally {\n            setIsLoading(false);\n        };\n    };\n\n    useEffect(() => {\n        const controller = new AbortController();\n        openReviews(controller, movieId);\n        return () => controller.abort();\n    }, [movieId]);\n   \n    return (\n        <>\n        {isLoading && <Loader />}\n        {infoReviews.length && !isLoading\n        ? (<div>\n            <List>\n                {infoReviews.map(item => (\n                    <Item key={item.id}>\n                        <SubTitle>{item.author}</SubTitle>\n                        <Text>{item.content}</Text>\n                    </Item>\n                )) }\n            </List>\n        </div>)\n            : (<div>\n                <SubTitle>We don`t have any reviews for this movie</SubTitle>\n            </div>)}\n        </>\n    );\n};\n\nexport default Reviews;\n","\nexport const notifyOptionsFailure = () => {\n    return {\n        timeout: 4000,\n        width: '400px',\n        svgSize: '80px',\n        backgroundColor: 'rgb(204, 0, 0, .7)',\n        position: 'right-top',\n        distance: '60px',\n        textColor: 'rgb(255, 245, 238, 0.8)',\n        fontSize: '20px',\n      };\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '84bdbe2f4baecea0c1be28902afc6a5b';\n\n\nconst fetchMovies = async (typeRequest, controller, query) => {\n\n    const request = await axios.get(typeRequest, {\n        params: {\n            api_key: API_KEY,\n            query,\n        },\n        signal: controller.signal,\n    });\n    return request.data;\n};\n\n\n\nexport default fetchMovies;"],"names":["List","styled","Item","SubTitle","Text","movieId","useParams","useState","isLoading","setIsLoading","infoReviews","setInfoReviews","openReviews","controller","options","notifyOptionsFailure","fetchMovies","response","results","code","Notify","useEffect","AbortController","abort","Loader","length","map","item","author","content","id","timeout","width","svgSize","backgroundColor","position","distance","textColor","fontSize","axios","typeRequest","query","params","api_key","signal","request","data"],"sourceRoot":""}