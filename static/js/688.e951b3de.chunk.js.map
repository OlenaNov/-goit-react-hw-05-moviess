{"version":3,"file":"static/js/688.e951b3de.chunk.js","mappings":"mUAEaA,EAAOC,EAAAA,GAAAA,KAAH,4CAIJC,EAAQD,EAAAA,GAAAA,MAAH,8cAoBLE,EAASF,EAAAA,GAAAA,OAAH,oZ,SCSnB,EA/BmB,SAAC,GAAsB,IAApBG,EAAmB,EAAnBA,aAClB,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,UAACP,EAAD,CACIQ,SAbW,SAAAC,GACfA,EAAEC,iBACEJ,GAKJF,EAAaE,GACbC,EAAc,KALVI,EAAAA,OAAAA,QAAe,uCAMtB,EAGG,WAGI,SAACT,EAAD,CACIU,KAAK,OACLC,MAAOP,EACPQ,YAAY,uBACZC,SAAU,SAAAN,GAAC,OAAIF,EAAcE,EAAEO,OAAOH,MAA3B,KAEf,SAACV,EAAD,CACIS,KAAK,SADT,sBAKX,E,UC9BYK,EAAOhB,EAAAA,GAAAA,GAAH,iDAKJiB,EAAOjB,EAAAA,GAAAA,GAAH,2CAIJkB,GAAalB,EAAAA,EAAAA,IAAOmB,EAAAA,GAAPnB,CAAH,yECUvB,EAnBwB,SAAC,GAAe,IAAboB,EAAY,EAAZA,MACjBC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,SAACN,EAAD,UACCI,EAAMG,KAAI,SAAAC,GAAI,OACX,SAACP,EAAD,WACI,SAACC,EAAD,CACIO,GAAE,UAAKD,EAAKE,IACZC,MAAO,CAAEC,KAAMP,GAFnB,SAIKG,EAAKK,SALHL,EAAKE,GADL,KAYtB,ECkCD,EA9Ce,WACX,OAAkCtB,EAAAA,EAAAA,WAAS,GAA3C,eAAO0B,EAAP,KAAkBC,EAAlB,KACA,GAAsC3B,EAAAA,EAAAA,UAAS,IAA/C,eAAO4B,EAAP,KAAoBC,EAApB,KACA,GAAsCC,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAcF,EAAYG,IAAI,SAE9BC,EAAY,mCAAG,WAAOC,EAAYH,GAAnB,uFAEbN,GAAa,GAFA,UAGUU,EAAAA,EAAAA,GAAW,kBAAmBD,EAAYH,GAHpD,OAGPK,EAHO,OAIbT,GAAe,OAAIS,EAASC,UAJf,gDAMK,iBAAf,KAAMC,MACLlC,EAAAA,OAAAA,QAAe,uDAPN,yBAUbqB,GAAa,GAVA,oFAAH,yDAclBc,EAAAA,EAAAA,YAAU,WACN,GAAGR,EAAa,CACZ,IAAMG,EAAa,IAAIM,gBAEvB,OADAP,EAAaC,EAAYH,GAClB,kBAAMG,EAAWO,OAAjB,CACV,CACJ,GAAE,CAACV,IAGJ,IAAMW,EAAY,mCAAG,WAAMpC,GAAN,iEACjBwB,EAAe,CAAExB,MAAAA,IADA,2CAAH,sDAIlB,OACI,gCACCkB,IAAa,SAAC,IAAD,CAAYmB,MAAM,wBAChC,SAAC,EAAD,CACI9C,aAAc6C,IAEjBhB,GACC,SAAC,EAAD,CAAiBZ,MAAOY,IACxB,OAGT,C,2EClDDkB,IAAAA,SAAAA,QAAyB,6BACzB,IAGMT,EAAU,mCAAG,WAAOU,EAAaX,EAAYY,GAAhC,uFAEOF,IAAAA,IAAUC,EAAa,CACzCE,OAAQ,CACJC,QAPI,mCAQJF,MAAAA,GAEJG,OAAQf,EAAWe,SAPR,cAETC,EAFS,yBASRA,EAAQC,MATA,2CAAH,0DAchB,K","sources":["components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","components/ListSearchFilms/ListSearchFilms.styled.js","components/ListSearchFilms/ListSearchFilms.jsx","pages/Movies/Movies.jsx","utilites/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Form = styled.form`\n    padding: 16px;\n`;\n\nexport const Input = styled.input`\n    width: 280px;\n    padding: 16px;\n    border: 1px solid rgb(255, 245, 238, 0.2);\n    border-radius: 5px;\n    background-color: rgb(33, 7, 5, 0.3);\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n    font-size: 22px;\n    color: rgb(255, 245, 238, 0.8);\n\n    &:hover, :focus {\n        border: 1px solid rgb(255, 245, 238, 0.8);\n    }\n\n    @media screen and (min-width: 768px) {\n        width: 600px;\n      }\n\n`;\n\nexport const Submit = styled.button`\n    padding: 16px;\n    border: 1px solid rgb(255, 245, 238, 0.2);\n    border-radius: 5px;\n    background-color: rgb(33, 7, 5, 0.3);\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n    font-size: 22px;\n    color: rgb(255, 245, 238, 0.8);\n\n    &:hover, :focus {\n        border: 1px solid rgb(255, 245, 238, 0.8);\n        color: rgb(255, 245, 238, 0.8);\n    }\n`;","import { useState } from \"react\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Input, Form, Submit } from \"./SearchForm.styled\";\n\nconst SearchForm = ({ onSubmitForm }) => {\n    const [valueInput, setValueInput] = useState('');\n\n    const makeSubmit = e => {\n        e.preventDefault();\n        if(!valueInput) {\n            Notify.failure('Please, write the name of the movie!');\n            return;\n        };\n\n        onSubmitForm(valueInput);\n        setValueInput('');\n    };\n\n    return (\n        <Form\n            onSubmit={makeSubmit}\n        >\n            <Input \n                type='text'\n                value={valueInput}\n                placeholder=\"Enter movie title...\"\n                onChange={e => setValueInput(e.target.value)}\n            />\n            <Submit \n                type='submit'\n            >Search</Submit>\n        </Form>\n    )\n};\n\nexport default SearchForm;\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n\n`;\n\nexport const Item = styled.li`\n    padding: 8px;\n`;\n\nexport const LinkStyled = styled(Link)`\n    text-decoration: none;\n    color: #5252d4;\n`;\n","import { useLocation } from \"react-router-dom\";\nimport { List, Item, LinkStyled } from \"./ListSearchFilms.styled\";\n\nconst ListSearchFilms = ({ items }) => {\n    const location = useLocation();\n\n    return (\n        <List>\n        {items.map(item => (\n            <Item key={item.id}>\n                <LinkStyled \n                    to={`${item.id}`} \n                    state={{ from: location}}\n                    >\n                    {item.title}\n                </LinkStyled>\n            </Item>\n        ))}\n        </List> \n    )\n};\n\nexport default ListSearchFilms;","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport SyncLoader from \"react-spinners/SyncLoader\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport fetchFilms from '../../utilites/api';\nimport SearchForm from 'components/SearchForm';\nimport ListSearchFilms from 'components/ListSearchFilms';\n\nconst Movies = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [searchFilms, setSearchFilms] = useState([]);\n    const [searchValue, setSearchValue] = useSearchParams();\n    const valueSearch = searchValue.get('value');\n\n    const searchMovies = async (controller, valueSearch) => {\n        try {\n            setIsLoading(true);\n            const response = await fetchFilms('/3/search/movie', controller, valueSearch);\n            setSearchFilms([...response.results]);\n        } catch(error) {\n            if(error.code !== 'ERR_CANCELED') {\n                Notify.failure('OOps! Error loading information. Please, try again!');\n            };\n        } finally {\n            setIsLoading(false);\n        };\n    };\n\n    useEffect(() => {\n        if(valueSearch) {\n            const controller = new AbortController();\n            searchMovies(controller, valueSearch);\n            return () => controller.abort();\n        };\n    }, [valueSearch]);\n\n    \n    const handleSubmit = async value => {\n        setSearchValue({ value });\n};\n\n    return (\n        <>\n        {isLoading && <SyncLoader color=\"rgb(204, 0, 0, .7)\" />}\n        <SearchForm \n            onSubmitForm={handleSubmit} \n        />\n        {searchFilms \n        ? <ListSearchFilms items={searchFilms} />\n        : null}\n    </>\n    );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '84bdbe2f4baecea0c1be28902afc6a5b';\n\n\nconst fetchFilms = async (typeRequest, controller, query) => {\n\n    const request = await axios.get(typeRequest, {\n        params: {\n            api_key: API_KEY,\n            query,\n        },\n        signal: controller.signal,\n    });\n    return request.data;\n};\n\n\n\nexport default fetchFilms;"],"names":["Form","styled","Input","Submit","onSubmitForm","useState","valueInput","setValueInput","onSubmit","e","preventDefault","Notify","type","value","placeholder","onChange","target","List","Item","LinkStyled","Link","items","location","useLocation","map","item","to","id","state","from","title","isLoading","setIsLoading","searchFilms","setSearchFilms","useSearchParams","searchValue","setSearchValue","valueSearch","get","searchMovies","controller","fetchFilms","response","results","code","useEffect","AbortController","abort","handleSubmit","color","axios","typeRequest","query","params","api_key","signal","request","data"],"sourceRoot":""}