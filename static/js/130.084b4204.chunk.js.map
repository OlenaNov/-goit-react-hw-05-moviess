{"version":3,"file":"static/js/130.084b4204.chunk.js","mappings":"mUAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,uGCAVE,EAAUF,EAAAA,GAAAA,IAAH,sBAEPG,EAASH,EAAAA,GAAAA,IAAH,uKAKNI,EAASJ,EAAAA,GAAAA,IAAH,iFAMNK,EAAQL,EAAAA,GAAAA,KAAH,0JAOLD,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,uG,SCCvB,EAtBkB,SAAC,GAAoB,IAAlBM,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACvB,OACQ,UAACL,EAAD,YACI,SAACC,EAAD,CACIK,IAAG,8CAAyCF,EAAKG,aACjDC,IAAG,iBAAYJ,EAAKK,OAASC,MAAM,QAAQ,aAAW,WAC1D,mBACA,SAAC,EAAD,CAAYC,GAAIN,EAAhB,mBACA,4BACI,0BAAKD,EAAKK,MAAV,IAAkBL,EAAKQ,aAAaC,MAAM,EAAG,OAC7C,yCAAiBC,KAAKC,MAA0B,GAApBX,EAAKY,cAAjC,QACA,sCACA,uBAAIZ,EAAKa,YACT,oCACA,SAACf,EAAD,UACKE,EAAKc,OAAOC,KAAI,SAAAC,GAAK,OAAK,SAACjB,EAAD,UAAuBiB,EAAMC,MAAjBD,EAAME,GAAvB,WAK7C,ECsCD,EApDqB,WAAO,IAAD,IACjBC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAC3D,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,MAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAe,mCAAG,WAAOC,EAAYH,GAAnB,uFAEhBH,GAAa,GAFG,UAGOO,EAAAA,EAAAA,GAAW,YAAD,OAAaJ,GAAWG,GAHzC,OAGVE,EAHU,OAIhBN,EAAYM,GAJI,gDAME,iBAAf,KAAMC,MACLC,EAAAA,OAAAA,QAAe,uDAPH,yBAWhBV,GAAa,GAXG,oFAAH,wDAsBrB,OAPAW,EAAAA,EAAAA,YAAU,WACN,IAAML,EAAa,IAAIM,gBAEnB,OADJP,EAAgBC,EAAYH,GACjB,kBAAMG,EAAWO,OAAjB,CACd,GAAE,CAACV,KAIJ,gCACKJ,IAAa,SAAC,IAAD,CAAYe,MAAM,uBAC/Bb,IACG,iCACA,SAACc,EAAD,CAAO1C,KAAM4B,EAAU3B,KAAMoB,EAAoBsB,WACjD,2BACI,oDACA,yBACI,SAAClD,EAAD,CAAYc,GAAG,OAAf,qBAEJ,yBACI,SAACd,EAAD,CAAYc,GAAG,UAAf,2BAGJ,SAAC,EAAAqC,SAAD,CAAUC,UAAU,SAAC,IAAD,CAAYJ,MAAM,YAAtC,UACI,SAAC,KAAD,WAMnB,C,2ECzDDK,IAAAA,SAAAA,QAAyB,6BACzB,IAGMZ,EAAU,mCAAG,WAAOa,EAAad,EAAYe,GAAhC,uFAEOF,IAAAA,IAAUC,EAAa,CACzCE,OAAQ,CACJC,QAPI,mCAQJF,MAAAA,GAEJG,OAAQlB,EAAWkB,SAPR,cAETC,EAFS,yBASRA,EAAQC,MATA,2CAAH,0DAchB,K","sources":["components/Reviews/Reviews.styled.js","components/Movie/Movie.styled.js","components/Movie/Movie.jsx","pages/MovieDetails/MovieDetails.jsx","utilites/api.js"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const StyledLink = styled(NavLink)`\ntext-decoration: none;\ncolor: #5252d4;\n\n&.active {\n    color: #eb1736;\n}\n`;","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Wrapper = styled.div``;\n\nexport const Poster = styled.img`\nborder-radius: 4px;\nbox-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;\n`;\n\nexport const Genres = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 4px;\n`;\n\nexport const Genre = styled.span`\n    padding: 4px;\n    border-radius: 8px;\n    border: 1px solid rgba(80, 20, 20, 0.3);\n    background: rgba(80, 20, 20, 0.8);\n`;\n\nexport const StyledLink = styled(NavLink)`\ntext-decoration: none;\ncolor: #5252d4;\n\n&.active {\n    color: #eb1736;\n}\n`;","import { Genre, Genres, Poster, StyledLink, Wrapper } from \"./Movie.styled\";\n\nconst ItemMovie = ({ item, link }) => {\n    return (\n            <Wrapper>\n                <Poster \n                    src={`https://image.tmdb.org/t/p/original/${item.poster_path}`} \n                    alt={`Poster ${item.title}`} width='200px' min-height='350px' />\n                <br />\n                <StyledLink to={link}>Back</StyledLink>\n                <div>\n                    <h1>{item.title} {item.release_date.slice(0, 4)}</h1>\n                    <h2>User Score: {Math.round(item.vote_average * 10)}%</h2>\n                    <h3>Overview</h3>\n                    <p>{item.overview}</p>\n                    <h3>Genres</h3>\n                    <Genres>\n                        {item.genres.map(genre => (<Genre key={genre.id}>{genre.name}</Genre>) )}\n                    </Genres>\n                </div>\n            </Wrapper>\n    );\n};\n\nexport default ItemMovie;","import { Suspense, useEffect, useRef, useState } from \"react\";\nimport { Outlet, useLocation, useParams } from \"react-router-dom\";\nimport SyncLoader from \"react-spinners/SyncLoader\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport fetchFilms from \"utilites/api\";\nimport { StyledLink } from \"components/Reviews/Reviews.styled\";\nimport Movie from \"components/Movie\";\n\nconst MovieDetails = () => {\n    const location = useLocation();\n    const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n    const [isLoading, setIsLoading] = useState(false);\n    const [infoFilm, setInfoFilm] = useState(null);\n    const { movieId } = useParams();\n\n    const seeMovieDetails = async (controller, movieId) => {\n        try {\n            setIsLoading(true);\n            const response = await fetchFilms(`/3/movie/${movieId}`, controller);\n            setInfoFilm(response);\n        } catch (error) {\n            if(error.code !== 'ERR_CANCELED') {\n                Notify.failure('OOps! Error loading information. Please, try again!');\n            };\n\n        } finally {\n            setIsLoading(false);\n        };\n    };\n\n    useEffect(() => {\n        const controller = new AbortController();\n        seeMovieDetails(controller, movieId);\n            return () => controller.abort();\n    }, [movieId]);\n\n\n    return (\n    <>\n        {isLoading && <SyncLoader color=\"rgb(204, 0, 0, .7)\" />}\n        {infoFilm && (\n            <>\n            <Movie item={infoFilm} link={backLinkLocationRef.current} />\n            <ul>\n                <h3>Additional information</h3>\n                <li>\n                    <StyledLink to='cast'>Cast</StyledLink>\n                </li>\n                <li>\n                    <StyledLink to='reviews'>Reviews</StyledLink>\n                </li>\n            </ul>\n                <Suspense fallback={<SyncLoader color=\"#eb1736\" />}>\n                    <Outlet />\n                </Suspense>\n            </>\n    )}\n    </>\n    );\n};\nexport default MovieDetails;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '84bdbe2f4baecea0c1be28902afc6a5b';\n\n\nconst fetchFilms = async (typeRequest, controller, query) => {\n\n    const request = await axios.get(typeRequest, {\n        params: {\n            api_key: API_KEY,\n            query,\n        },\n        signal: controller.signal,\n    });\n    return request.data;\n};\n\n\n\nexport default fetchFilms;"],"names":["StyledLink","styled","NavLink","Wrapper","Poster","Genres","Genre","item","link","src","poster_path","alt","title","width","to","release_date","slice","Math","round","vote_average","overview","genres","map","genre","name","id","location","useLocation","backLinkLocationRef","useRef","state","from","useState","isLoading","setIsLoading","infoFilm","setInfoFilm","movieId","useParams","seeMovieDetails","controller","fetchFilms","response","code","Notify","useEffect","AbortController","abort","color","Movie","current","Suspense","fallback","axios","typeRequest","query","params","api_key","signal","request","data"],"sourceRoot":""}