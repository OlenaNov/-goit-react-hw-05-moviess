{"version":3,"file":"static/js/239.10c66add.chunk.js","mappings":"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","sources":["constants/notifyOptions.js","components/Movie/Movie.styled.js","components/Movie/Movie.jsx","pages/MovieDetails/MovieDetails.jsx","utilites/api.js"],"sourcesContent":["\nexport const notifyOptionsFailure = () => {\n    return {\n        timeout: 4000,\n        width: '400px',\n        svgSize: '80px',\n        backgroundColor: 'rgb(204, 0, 0, .7)',\n        position: 'right-top',\n        distance: '60px',\n        textColor: 'rgb(255, 245, 238)',\n        fontSize: '20px',\n      };\n};\n","import styled from \"styled-components\";\nimport { Link, NavLink } from \"react-router-dom\";\n\nexport const Wrapper = styled.div`\n    display: flex;\n    gap: 24px;\n    flex-direction: column;\n    flex-wrap: wrap;\n    width: 50%;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 40px;\n    border-radius: 8px;\n    background-image: linear-gradient(to bottom, rgba(0, 0, 0, .7), rgba(0, 0, 0, .9));\n    box-shadow: rgba(0, 0, 0, .07) 0px 1px 2px, rgba(0, 0, 0, .07) 0px 2px 4px, rgba(0, 0, 0, .07) 0px 4px 8px, rgba(0, 0, 0, 0.07) 0px 8px 16px, rgba(0, 0, 0, .07) 0px 16px 32px, rgba(0, 0, 0, .07) 0px 32px 64px;\n    \n`;\n\nexport const BasicInfo = styled.div`\n    display: flex;  \n    gap: 24px;\n    flex-wrap: no-wrap;\n\n    @media screen and (max-width: 1024px) {\n        flex-wrap: wrap;\n    }\n`;\n\nexport const Box = styled.div`\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nexport const Poster = styled.img`\n    display: block;\n    width: 360px;\n    height: auto;\n    border-radius: 4px;\n    box-shadow: rgba(0, 0, 0, .4) 0px 2px 4px, rgba(0, 0, 0, .3) 0px 7px 13px -3px, rgba(0, 0, 0, .2) 0px -3px 0px inset;\n\n    @media screen and (max-width: 1024px) {\n        width: 200px;\n        margin-left: auto;\n        margin-right: auto;\n    }\n`;\n\nexport const Title = styled.h1`\n    color: rgb(255, 245, 238, .9);\n    font-size: 24px;\n\n    @media screen and (min-width: 1024px) {\n        font-size: 36px;\n      }\n`;\n\nexport const Text = styled.p`\n    color: rgb(255, 245, 238, .9);\n    font-size: 16px;\n\n    @media screen and (min-width: 1024px) {\n        font-size: 24px;\n      }\n`;\n\nexport const Subtitle = styled.h2`\n    color: rgb(255, 245, 238, .9);\n    font-size: 18px;\n\n    @media screen and (min-width: 768px) {\n        font-size: 28px;\n      }\n`;\n\nexport const Genres = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 4px;\n`;\n\nexport const Genre = styled.span`\n    padding: 4px;\n    border-radius: 8px;\n    border: 1px solid rgba(80, 20, 20, .3);\n    background: rgba(80, 20, 20, .8);\n    color: rgb(255, 245, 238, .9);\n    font-size: 18px;\n\n    \n    @media screen and (min-width: 1024px) {\n        font-size: 24px;\n      }\n`;\n\nexport const LinkBack = styled(Link)`\n    display: inline-block;\n    margin-right: auto;\n    margin-bottom: 24px;\n    padding: 8px;\n    font-size: 20px;\n    color: rgb(204, 0, 0, .9);\n`;\n\nexport const AdditionalInfo = styled.div`\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    justify-content: center;\n\n    @media screen and (min-width: 768px) {\n        flex-direction: row;\n        gap: 80px;\n      }\n`;\n\nexport const Item = styled.li`\n\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n    text-decoration: none;\n    display: inline-block;\n    padding: 8px 20px;\n    background-color: rgb(255, 245, 238, .3);\n    color: rgba(80, 20, 20);\n    font-size: 22px;\n    font-weight: 600;\n    border-radius: 8px;\n    border: 3px solid rgba(80, 20, 20);\n\n    \n    @media screen and (min-width: 1024px) {\n        font-size: 26px;\n        padding: 12px 30px;\n    }\n\n    &:hover, &:focus {\n        border-radius: 12px;\n        background-color: rgb(255, 245, 238, .5);\n    }\n\n    \n    &.active {\n        color: rgb(204, 0, 0, .7);\n        background-color: rgb(255, 245, 238, .6);\n    }\n`;","import { Genre, Genres, Poster, Title, Text, Wrapper, LinkBack, Box, BasicInfo, AdditionalInfo, List, Item, StyledNavLink } from \"./Movie.styled\";\nimport defaultImage from '../../images/default-movie-poster.jpg';\n\nconst Movie = ({ item, link }) => {\n\n    return (\n            <Wrapper>\n                <BasicInfo>\n                <Box>\n                {item.poster_path \n                ? (<Poster \n                    src={`https://image.tmdb.org/t/p/original/${item.poster_path}`} \n                    alt={`Poster ${item.title}`} />)\n                : (<Poster \n                src={defaultImage} \n                alt={`Poster ${item.title}`} />)\n                }\n                <LinkBack to={link}>Go Back</LinkBack>\n                <Genres>\n                        {item.genres.map(genre => (<Genre key={genre.id}>{genre.name}</Genre>) )}\n                </Genres>\n                </Box>\n                <div>\n                    <Title>{item.title} {item.release_date.slice(0, 4)}</Title>\n                    <Text>User Score: {Math.round(item.vote_average * 10)}%</Text>\n                    <Text>{item.overview}</Text>\n                </div>\n                </BasicInfo>\n                <AdditionalInfo>\n                    <List>\n                        <Item>\n                            <StyledNavLink to='cast'>Cast</StyledNavLink>\n                        </Item>\n                        <Item>\n                            <StyledNavLink to='reviews'>Reviews</StyledNavLink>\n                        </Item>\n                    </List>\n                </AdditionalInfo>\n            </Wrapper>\n    );\n};\n\nexport default Movie;","import { Suspense, useEffect, useRef, useState } from \"react\";\nimport { Outlet, useLocation, useParams } from \"react-router-dom\";\nimport SyncLoader from \"react-spinners/SyncLoader\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { notifyOptionsFailure } from \"constants/notifyOptions\";\nimport fetchMovies from \"utilites/api\";\nimport Movie from \"components/Movie\";\n\nconst MovieDetails = () => {\n    const location = useLocation();\n    const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n    const [isLoading, setIsLoading] = useState(false);\n    const [infoFilm, setInfoFilm] = useState(null);\n    const { movieId } = useParams();\n\n    const openMovieDetails = async (controller, movieId) => {\n        const options = notifyOptionsFailure();\n        try {\n            setIsLoading(true);\n            const response = await fetchMovies(`/3/movie/${movieId}`, controller);\n            setInfoFilm(response);\n        } catch (error) {\n            if(error.code !== 'ERR_CANCELED') {\n                Notify.failure('OOps! Error loading information. Please, try again!', options);\n            };\n        } finally {\n            setIsLoading(false);\n        };\n    };\n\n    useEffect(() => {\n        const controller = new AbortController();\n        openMovieDetails(controller, movieId);\n            return () => controller.abort();\n    }, [movieId]);\n\n\n    return (\n    <>\n        {isLoading && <SyncLoader color=\"rgb(204, 0, 0, .7)\" />}\n        {infoFilm && (\n            <>\n            <Movie item={infoFilm} link={backLinkLocationRef.current} />\n                <Suspense fallback={<SyncLoader color=\"rgb(204, 0, 0, .7)\" />}>\n                    <Outlet />\n                </Suspense>\n            </>\n    )}\n    </>\n    );\n};\nexport default MovieDetails;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '84bdbe2f4baecea0c1be28902afc6a5b';\n\n\nconst fetchMovies = async (typeRequest, controller, query) => {\n\n    const request = await axios.get(typeRequest, {\n        params: {\n            api_key: API_KEY,\n            query,\n        },\n        signal: controller.signal,\n    });\n    return request.data;\n};\n\n\n\nexport default fetchMovies;"],"names":["notifyOptionsFailure","timeout","width","svgSize","backgroundColor","position","distance","textColor","fontSize","Wrapper","styled","BasicInfo","Box","Poster","Title","Text","Genres","Genre","LinkBack","Link","AdditionalInfo","List","Item","StyledNavLink","NavLink","item","link","poster_path","src","alt","title","defaultImage","to","genres","map","genre","name","id","release_date","slice","Math","round","vote_average","overview","location","useLocation","backLinkLocationRef","useRef","state","from","useState","isLoading","setIsLoading","infoFilm","setInfoFilm","movieId","useParams","openMovieDetails","controller","options","fetchMovies","response","code","Notify","useEffect","AbortController","abort","color","current","Suspense","fallback","axios","typeRequest","query","params","api_key","signal","request","data"],"sourceRoot":""}