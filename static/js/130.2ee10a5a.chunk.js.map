{"version":3,"file":"static/js/130.2ee10a5a.chunk.js","mappings":"2UAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,uGCAVE,EAAUF,EAAAA,GAAAA,IAAH,4kBAkBPG,EAAMH,EAAAA,GAAAA,IAAH,yEAKHI,EAASJ,EAAAA,GAAAA,IAAH,sTAYNK,EAAQL,EAAAA,GAAAA,GAAH,oKASLM,EAAON,EAAAA,GAAAA,EAAH,oKAkBJO,GATWP,EAAAA,GAAAA,GAAH,mKASCA,EAAAA,GAAAA,IAAH,kFAMNQ,EAAQR,EAAAA,GAAAA,KAAH,sSAcLS,GAAWT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,gL,SC9DrB,EArBkB,SAAC,GAAoB,IAAlBW,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACvB,OACQ,UAACV,EAAD,YACI,UAACC,EAAD,YACA,SAACC,EAAD,CACIS,IAAG,8CAAyCF,EAAKG,aACjDC,IAAG,iBAAYJ,EAAKK,UACxB,SAACP,EAAD,CAAUQ,GAAIL,EAAd,sBACA,SAACL,EAAD,UACSI,EAAKO,OAAOC,KAAI,SAAAC,GAAK,OAAK,SAACZ,EAAD,UAAuBY,EAAMC,MAAjBD,EAAME,GAAvB,UAG9B,4BACI,UAACjB,EAAD,WAAQM,EAAKK,MAAb,IAAqBL,EAAKY,aAAaC,MAAM,EAAG,OAChD,UAAClB,EAAD,0BAAmBmB,KAAKC,MAA0B,GAApBf,EAAKgB,cAAnC,QACA,SAACrB,EAAD,UAAOK,EAAKiB,gBAI/B,ECuCD,EApDqB,WAAO,IAAD,IACjBC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAC3D,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,MAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAe,mCAAG,WAAOC,EAAYH,GAAnB,uFAEhBH,GAAa,GAFG,UAGOO,EAAAA,EAAAA,GAAW,YAAD,OAAaJ,GAAWG,GAHzC,OAGVE,EAHU,OAIhBN,EAAYM,GAJI,gDAME,iBAAf,KAAMC,MACLC,EAAAA,OAAAA,QAAe,uDAPH,yBAWhBV,GAAa,GAXG,oFAAH,wDAsBrB,OAPAW,EAAAA,EAAAA,YAAU,WACN,IAAML,EAAa,IAAIM,gBAEnB,OADJP,EAAgBC,EAAYH,GACjB,kBAAMG,EAAWO,OAAjB,CACd,GAAE,CAACV,KAIJ,gCACKJ,IAAa,SAAC,IAAD,CAAYe,MAAM,uBAC/Bb,IACG,iCACA,SAACc,EAAD,CAAOzC,KAAM2B,EAAU1B,KAAMmB,EAAoBsB,WACjD,2BACI,oDACA,yBACI,SAACtD,EAAD,CAAYkB,GAAG,OAAf,qBAEJ,yBACI,SAAClB,EAAD,CAAYkB,GAAG,UAAf,2BAGJ,SAAC,EAAAqC,SAAD,CAAUC,UAAU,SAAC,IAAD,CAAYJ,MAAM,YAAtC,UACI,SAAC,KAAD,WAMnB,C,2ECzDDK,IAAAA,SAAAA,QAAyB,6BACzB,IAGMZ,EAAU,mCAAG,WAAOa,EAAad,EAAYe,GAAhC,uFAEOF,IAAAA,IAAUC,EAAa,CACzCE,OAAQ,CACJC,QAPI,mCAQJF,MAAAA,GAEJG,OAAQlB,EAAWkB,SAPR,cAETC,EAFS,yBASRA,EAAQC,MATA,2CAAH,0DAchB,K","sources":["components/Reviews/Reviews.styled.js","components/Movie/Movie.styled.js","components/Movie/Movie.jsx","pages/MovieDetails/MovieDetails.jsx","utilites/api.js"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const StyledLink = styled(NavLink)`\ntext-decoration: none;\ncolor: #5252d4;\n\n&.active {\n    color: #eb1736;\n}\n`;","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const Wrapper = styled.div`\n    display: flex;\n    gap: 24px;\n    flex-wrap: no-wrap;\n    width: 50%;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 40px;\n    border-radius: 8px;\n    background-image: linear-gradient(to bottom, rgba(0, 0, 0, .7), rgba(0, 0, 0, .9));\n    box-shadow: rgba(0, 0, 0, .07) 0px 1px 2px, rgba(0, 0, 0, .07) 0px 2px 4px, rgba(0, 0, 0, .07) 0px 4px 8px, rgba(0, 0, 0, 0.07) 0px 8px 16px, rgba(0, 0, 0, .07) 0px 16px 32px, rgba(0, 0, 0, .07) 0px 32px 64px;\n    \n    @media screen and (max-width: 1024px) {\n        flex-wrap: wrap;\n      }\n\n`;\n\nexport const Box = styled.div`\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nexport const Poster = styled.img`\n    display: block;\n    width: 360px;\n    height: auto;\n    border-radius: 4px;\n    box-shadow: rgba(0, 0, 0, .4) 0px 2px 4px, rgba(0, 0, 0, .3) 0px 7px 13px -3px, rgba(0, 0, 0, .2) 0px -3px 0px inset;\n\n    @media screen and (max-width: 1024px) {\n        width: 200px;\n      }\n`;\n\nexport const Title = styled.h1`\n    color: rgb(255, 245, 238, .9);\n    font-size: 20px;\n\n    @media screen and (min-width: 1024px) {\n        font-size: 36px;\n      }\n`;\n\nexport const Text = styled.p`\n    color: rgb(255, 245, 238, .9);\n    font-size: 16px;\n\n    @media screen and (min-width: 1024px) {\n        font-size: 24px;\n      }\n`;\n\nexport const Subtitle = styled.h2`\n    color: rgb(255, 245, 238, .9);\n    font-size: 18px;\n\n    @media screen and (min-width: 768px) {\n        font-size: 28px;\n      }\n`;\n\nexport const Genres = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 4px;\n`;\n\nexport const Genre = styled.span`\n    padding: 4px;\n    border-radius: 8px;\n    border: 1px solid rgba(80, 20, 20, .3);\n    background: rgba(80, 20, 20, .8);\n    color: rgb(255, 245, 238);\n    font-size: 18px;\n\n    \n    @media screen and (min-width: 1024px) {\n        font-size: 24px;\n      }\n`;\n\nexport const LinkBack = styled(Link)`\n    display: inline-block;\n    margin-right: auto;\n    margin-bottom: 24px;\n    padding: 8px;\n    font-size: 18px;\n    color: rgb(204, 0, 0, .9);\n`;","import { Genre, Genres, Poster, Title, Text, Wrapper, LinkBack, Box } from \"./Movie.styled\";\n\nconst ItemMovie = ({ item, link }) => {\n    return (\n            <Wrapper>\n                <Box>\n                <Poster \n                    src={`https://image.tmdb.org/t/p/original/${item.poster_path}`} \n                    alt={`Poster ${item.title}`} />\n                <LinkBack to={link}>Go Back</LinkBack>\n                <Genres>\n                        {item.genres.map(genre => (<Genre key={genre.id}>{genre.name}</Genre>) )}\n                </Genres>\n                </Box>\n                <div>\n                    <Title>{item.title} {item.release_date.slice(0, 4)}</Title>\n                    <Text>User Score: {Math.round(item.vote_average * 10)}%</Text>\n                    <Text>{item.overview}</Text>\n                </div>\n            </Wrapper>\n    );\n};\n\nexport default ItemMovie;","import { Suspense, useEffect, useRef, useState } from \"react\";\nimport { Outlet, useLocation, useParams } from \"react-router-dom\";\nimport SyncLoader from \"react-spinners/SyncLoader\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport fetchFilms from \"utilites/api\";\nimport { StyledLink } from \"components/Reviews/Reviews.styled\";\nimport Movie from \"components/Movie\";\n\nconst MovieDetails = () => {\n    const location = useLocation();\n    const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n    const [isLoading, setIsLoading] = useState(false);\n    const [infoFilm, setInfoFilm] = useState(null);\n    const { movieId } = useParams();\n\n    const seeMovieDetails = async (controller, movieId) => {\n        try {\n            setIsLoading(true);\n            const response = await fetchFilms(`/3/movie/${movieId}`, controller);\n            setInfoFilm(response);\n        } catch (error) {\n            if(error.code !== 'ERR_CANCELED') {\n                Notify.failure('OOps! Error loading information. Please, try again!');\n            };\n\n        } finally {\n            setIsLoading(false);\n        };\n    };\n\n    useEffect(() => {\n        const controller = new AbortController();\n        seeMovieDetails(controller, movieId);\n            return () => controller.abort();\n    }, [movieId]);\n\n\n    return (\n    <>\n        {isLoading && <SyncLoader color=\"rgb(204, 0, 0, .7)\" />}\n        {infoFilm && (\n            <>\n            <Movie item={infoFilm} link={backLinkLocationRef.current} />\n            <ul>\n                <h3>Additional information</h3>\n                <li>\n                    <StyledLink to='cast'>Cast</StyledLink>\n                </li>\n                <li>\n                    <StyledLink to='reviews'>Reviews</StyledLink>\n                </li>\n            </ul>\n                <Suspense fallback={<SyncLoader color=\"#eb1736\" />}>\n                    <Outlet />\n                </Suspense>\n            </>\n    )}\n    </>\n    );\n};\nexport default MovieDetails;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '84bdbe2f4baecea0c1be28902afc6a5b';\n\n\nconst fetchFilms = async (typeRequest, controller, query) => {\n\n    const request = await axios.get(typeRequest, {\n        params: {\n            api_key: API_KEY,\n            query,\n        },\n        signal: controller.signal,\n    });\n    return request.data;\n};\n\n\n\nexport default fetchFilms;"],"names":["StyledLink","styled","NavLink","Wrapper","Box","Poster","Title","Text","Genres","Genre","LinkBack","Link","item","link","src","poster_path","alt","title","to","genres","map","genre","name","id","release_date","slice","Math","round","vote_average","overview","location","useLocation","backLinkLocationRef","useRef","state","from","useState","isLoading","setIsLoading","infoFilm","setInfoFilm","movieId","useParams","seeMovieDetails","controller","fetchFilms","response","code","Notify","useEffect","AbortController","abort","color","Movie","current","Suspense","fallback","axios","typeRequest","query","params","api_key","signal","request","data"],"sourceRoot":""}